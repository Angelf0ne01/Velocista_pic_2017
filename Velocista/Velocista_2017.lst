CCS PCH C Compiler, Version 5.015, 5967               02-jul.-17 19:18

               Filename:   C:\Users\Angel_fon\Desktop\GitHub\Velocista\Velocista_2017.lst

               ROM used:   4306 bytes (13%)
                           Largest free fragment is 28462
               RAM used:   129 (6%) at main() level
                           162 (8%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0000:  GOTO   0FDA
.................... #include <18F2550.h> 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
0004:  MOVLW  8E
0006:  MOVWF  00
0008:  MOVFF  91,01
000C:  MOVFF  90,02
0010:  CLRF   03
0012:  MOVF   01,F
0014:  BNZ   0028
0016:  MOVFF  02,01
001A:  CLRF   02
001C:  MOVLW  08
001E:  SUBWF  00,F
0020:  MOVF   01,F
0022:  BNZ   0028
0024:  CLRF   00
0026:  BRA    0038
0028:  BCF    FD8.0
002A:  BTFSC  01.7
002C:  BRA    0036
002E:  RLCF   02,F
0030:  RLCF   01,F
0032:  DECF   00,F
0034:  BRA    0028
0036:  BCF    01.7
0038:  RETURN 0
003A:  MOVF   x90,W
003C:  BTFSC  FD8.2
003E:  BRA    0122
0040:  MOVWF  00
0042:  MOVF   x94,W
0044:  BTFSC  FD8.2
0046:  BRA    0122
0048:  ADDWF  00,F
004A:  BNC   0054
004C:  MOVLW  81
004E:  ADDWF  00,F
0050:  BC    0122
0052:  BRA    005C
0054:  MOVLW  7F
0056:  SUBWF  00,F
0058:  BNC   0122
005A:  BZ    0122
005C:  MOVFF  91,98
0060:  MOVF   x95,W
0062:  XORWF  x98,F
0064:  BSF    x91.7
0066:  BSF    x95.7
0068:  MOVF   x93,W
006A:  MULWF  x97
006C:  MOVFF  FF4,9A
0070:  MOVF   x92,W
0072:  MULWF  x96
0074:  MOVFF  FF4,03
0078:  MOVFF  FF3,99
007C:  MULWF  x97
007E:  MOVF   FF3,W
0080:  ADDWF  x9A,F
0082:  MOVF   FF4,W
0084:  ADDWFC x99,F
0086:  MOVLW  00
0088:  ADDWFC 03,F
008A:  MOVF   x93,W
008C:  MULWF  x96
008E:  MOVF   FF3,W
0090:  ADDWF  x9A,F
0092:  MOVF   FF4,W
0094:  ADDWFC x99,F
0096:  MOVLW  00
0098:  CLRF   02
009A:  ADDWFC 03,F
009C:  ADDWFC 02,F
009E:  MOVF   x91,W
00A0:  MULWF  x97
00A2:  MOVF   FF3,W
00A4:  ADDWF  x99,F
00A6:  MOVF   FF4,W
00A8:  ADDWFC 03,F
00AA:  MOVLW  00
00AC:  ADDWFC 02,F
00AE:  MOVF   x91,W
00B0:  MULWF  x96
00B2:  MOVF   FF3,W
00B4:  ADDWF  03,F
00B6:  MOVF   FF4,W
00B8:  ADDWFC 02,F
00BA:  MOVLW  00
00BC:  CLRF   01
00BE:  ADDWFC 01,F
00C0:  MOVF   x93,W
00C2:  MULWF  x95
00C4:  MOVF   FF3,W
00C6:  ADDWF  x99,F
00C8:  MOVF   FF4,W
00CA:  ADDWFC 03,F
00CC:  MOVLW  00
00CE:  ADDWFC 02,F
00D0:  ADDWFC 01,F
00D2:  MOVF   x92,W
00D4:  MULWF  x95
00D6:  MOVF   FF3,W
00D8:  ADDWF  03,F
00DA:  MOVF   FF4,W
00DC:  ADDWFC 02,F
00DE:  MOVLW  00
00E0:  ADDWFC 01,F
00E2:  MOVF   x91,W
00E4:  MULWF  x95
00E6:  MOVF   FF3,W
00E8:  ADDWF  02,F
00EA:  MOVF   FF4,W
00EC:  ADDWFC 01,F
00EE:  INCF   00,F
00F0:  BTFSC  01.7
00F2:  BRA    00FE
00F4:  RLCF   x99,F
00F6:  RLCF   03,F
00F8:  RLCF   02,F
00FA:  RLCF   01,F
00FC:  DECF   00,F
00FE:  MOVLW  00
0100:  BTFSS  x99.7
0102:  BRA    0118
0104:  INCF   03,F
0106:  ADDWFC 02,F
0108:  ADDWFC 01,F
010A:  MOVF   01,W
010C:  BNZ   0118
010E:  MOVF   02,W
0110:  BNZ   0118
0112:  MOVF   03,W
0114:  BNZ   0118
0116:  INCF   00,F
0118:  BTFSC  x98.7
011A:  BSF    01.7
011C:  BTFSS  x98.7
011E:  BCF    01.7
0120:  BRA    012A
0122:  CLRF   00
0124:  CLRF   01
0126:  CLRF   02
0128:  CLRF   03
012A:  RETURN 0
012C:  MOVF   x92,W
012E:  BTFSC  FD8.2
0130:  BRA    027C
0132:  MOVWF  x9E
0134:  MOVF   x96,W
0136:  BTFSC  FD8.2
0138:  BRA    027C
013A:  SUBWF  x9E,F
013C:  BNC   0148
013E:  MOVLW  7F
0140:  ADDWF  x9E,F
0142:  BTFSC  FD8.0
0144:  BRA    027C
0146:  BRA    0154
0148:  MOVLW  81
014A:  SUBWF  x9E,F
014C:  BTFSS  FD8.0
014E:  BRA    027C
0150:  BTFSC  FD8.2
0152:  BRA    027C
0154:  MOVFF  9E,00
0158:  CLRF   01
015A:  CLRF   02
015C:  CLRF   03
015E:  CLRF   x9D
0160:  MOVFF  93,9C
0164:  BSF    x9C.7
0166:  MOVFF  94,9B
016A:  MOVFF  95,9A
016E:  MOVLW  19
0170:  MOVWF  x9E
0172:  MOVF   x99,W
0174:  SUBWF  x9A,F
0176:  BC    0192
0178:  MOVLW  01
017A:  SUBWF  x9B,F
017C:  BC    0192
017E:  SUBWF  x9C,F
0180:  BC    0192
0182:  SUBWF  x9D,F
0184:  BC    0192
0186:  INCF   x9D,F
0188:  INCF   x9C,F
018A:  INCF   x9B,F
018C:  MOVF   x99,W
018E:  ADDWF  x9A,F
0190:  BRA    01E2
0192:  MOVF   x98,W
0194:  SUBWF  x9B,F
0196:  BC    01BC
0198:  MOVLW  01
019A:  SUBWF  x9C,F
019C:  BC    01BC
019E:  SUBWF  x9D,F
01A0:  BC    01BC
01A2:  INCF   x9D,F
01A4:  INCF   x9C,F
01A6:  MOVF   x98,W
01A8:  ADDWF  x9B,F
01AA:  MOVF   x99,W
01AC:  ADDWF  x9A,F
01AE:  BNC   01E2
01B0:  INCF   x9B,F
01B2:  BNZ   01E2
01B4:  INCF   x9C,F
01B6:  BNZ   01E2
01B8:  INCF   x9D,F
01BA:  BRA    01E2
01BC:  MOVF   x97,W
01BE:  IORLW  80
01C0:  SUBWF  x9C,F
01C2:  BC    01E0
01C4:  MOVLW  01
01C6:  SUBWF  x9D,F
01C8:  BC    01E0
01CA:  INCF   x9D,F
01CC:  MOVF   x97,W
01CE:  IORLW  80
01D0:  ADDWF  x9C,F
01D2:  MOVF   x98,W
01D4:  ADDWF  x9B,F
01D6:  BNC   01AA
01D8:  INCF   x9C,F
01DA:  BNZ   01AA
01DC:  INCF   x9D,F
01DE:  BRA    01AA
01E0:  BSF    03.0
01E2:  DECFSZ x9E,F
01E4:  BRA    01E8
01E6:  BRA    01FE
01E8:  BCF    FD8.0
01EA:  RLCF   x9A,F
01EC:  RLCF   x9B,F
01EE:  RLCF   x9C,F
01F0:  RLCF   x9D,F
01F2:  BCF    FD8.0
01F4:  RLCF   03,F
01F6:  RLCF   02,F
01F8:  RLCF   01,F
01FA:  RLCF   x9F,F
01FC:  BRA    0172
01FE:  BTFSS  x9F.0
0200:  BRA    020E
0202:  BCF    FD8.0
0204:  RRCF   01,F
0206:  RRCF   02,F
0208:  RRCF   03,F
020A:  RRCF   x9F,F
020C:  BRA    0212
020E:  DECF   00,F
0210:  BZ    027C
0212:  BTFSC  x9F.7
0214:  BRA    0252
0216:  BCF    FD8.0
0218:  RLCF   x9A,F
021A:  RLCF   x9B,F
021C:  RLCF   x9C,F
021E:  RLCF   x9D,F
0220:  MOVF   x99,W
0222:  SUBWF  x9A,F
0224:  BC    0234
0226:  MOVLW  01
0228:  SUBWF  x9B,F
022A:  BC    0234
022C:  SUBWF  x9C,F
022E:  BC    0234
0230:  SUBWF  x9D,F
0232:  BNC   0268
0234:  MOVF   x98,W
0236:  SUBWF  x9B,F
0238:  BC    0244
023A:  MOVLW  01
023C:  SUBWF  x9C,F
023E:  BC    0244
0240:  SUBWF  x9D,F
0242:  BNC   0268
0244:  MOVF   x97,W
0246:  IORLW  80
0248:  SUBWF  x9C,F
024A:  BC    0252
024C:  MOVLW  01
024E:  SUBWF  x9D,F
0250:  BNC   0268
0252:  INCF   03,F
0254:  BNZ   0268
0256:  INCF   02,F
0258:  BNZ   0268
025A:  INCF   01,F
025C:  BNZ   0268
025E:  INCF   00,F
0260:  BZ    027C
0262:  RRCF   01,F
0264:  RRCF   02,F
0266:  RRCF   03,F
0268:  MOVFF  93,9E
026C:  MOVF   x97,W
026E:  XORWF  x9E,F
0270:  BTFSS  x9E.7
0272:  BRA    0278
0274:  BSF    01.7
0276:  BRA    0284
0278:  BCF    01.7
027A:  BRA    0284
027C:  CLRF   00
027E:  CLRF   01
0280:  CLRF   02
0282:  CLRF   03
0284:  RETURN 0
0286:  MOVFF  91,98
028A:  MOVF   x95,W
028C:  XORWF  x98,F
028E:  BTFSS  x98.7
0290:  BRA    029C
0292:  BCF    FD8.2
0294:  BCF    FD8.0
0296:  BTFSC  x91.7
0298:  BSF    FD8.0
029A:  BRA    02FA
029C:  MOVFF  91,98
02A0:  MOVFF  94,99
02A4:  MOVF   x90,W
02A6:  SUBWF  x99,F
02A8:  BZ    02B6
02AA:  BTFSS  x98.7
02AC:  BRA    02FA
02AE:  MOVF   FD8,W
02B0:  XORLW  01
02B2:  MOVWF  FD8
02B4:  BRA    02FA
02B6:  MOVFF  95,99
02BA:  MOVF   x91,W
02BC:  SUBWF  x99,F
02BE:  BZ    02CC
02C0:  BTFSS  x98.7
02C2:  BRA    02FA
02C4:  MOVF   FD8,W
02C6:  XORLW  01
02C8:  MOVWF  FD8
02CA:  BRA    02FA
02CC:  MOVFF  96,99
02D0:  MOVF   x92,W
02D2:  SUBWF  x99,F
02D4:  BZ    02E2
02D6:  BTFSS  x98.7
02D8:  BRA    02FA
02DA:  MOVF   FD8,W
02DC:  XORLW  01
02DE:  MOVWF  FD8
02E0:  BRA    02FA
02E2:  MOVFF  97,99
02E6:  MOVF   x93,W
02E8:  SUBWF  x99,F
02EA:  BZ    02F8
02EC:  BTFSS  x98.7
02EE:  BRA    02FA
02F0:  MOVF   FD8,W
02F2:  XORLW  01
02F4:  MOVWF  FD8
02F6:  BRA    02FA
02F8:  BCF    FD8.0
02FA:  RETURN 0
02FC:  MOVLW  8E
02FE:  MOVWF  00
0300:  MOVF   x8E,W
0302:  SUBWF  00,F
0304:  MOVFF  8F,02
0308:  MOVFF  90,01
030C:  BSF    02.7
030E:  MOVF   00,F
0310:  BZ    0324
0312:  BCF    FD8.0
0314:  MOVF   02,F
0316:  BNZ   031C
0318:  MOVF   01,F
031A:  BZ    0324
031C:  RRCF   02,F
031E:  RRCF   01,F
0320:  DECFSZ 00,F
0322:  BRA    0312
0324:  BTFSS  x8F.7
0326:  BRA    0332
0328:  COMF   01,F
032A:  COMF   02,F
032C:  INCF   01,F
032E:  BTFSC  FD8.2
0330:  INCF   02,F
0332:  RETURN 0
0334:  MOVLW  80
0336:  BTFSC  FD8.1
0338:  XORWF  x97,F
033A:  CLRF   x9C
033C:  CLRF   x9D
033E:  MOVFF  93,9B
0342:  MOVF   x97,W
0344:  XORWF  x9B,F
0346:  MOVF   x92,W
0348:  BTFSC  FD8.2
034A:  BRA    0504
034C:  MOVWF  x9A
034E:  MOVWF  00
0350:  MOVF   x96,W
0352:  BTFSC  FD8.2
0354:  BRA    0516
0356:  SUBWF  x9A,F
0358:  BTFSC  FD8.2
035A:  BRA    045E
035C:  BNC   03D8
035E:  MOVFF  97,A0
0362:  BSF    xA0.7
0364:  MOVFF  98,9F
0368:  MOVFF  99,9E
036C:  CLRF   x9D
036E:  BCF    FD8.0
0370:  RRCF   xA0,F
0372:  RRCF   x9F,F
0374:  RRCF   x9E,F
0376:  RRCF   x9D,F
0378:  DECFSZ x9A,F
037A:  BRA    036C
037C:  BTFSS  x9B.7
037E:  BRA    0386
0380:  BSF    x9C.0
0382:  BRA    053E
0384:  BCF    x9C.0
0386:  BCF    x9A.0
0388:  BSF    x9C.4
038A:  CLRF   FEA
038C:  MOVLW  95
038E:  MOVWF  FE9
0390:  BRA    0564
0392:  BCF    x9C.4
0394:  BTFSC  x9B.7
0396:  BRA    03AC
0398:  BTFSS  x9A.0
039A:  BRA    03C2
039C:  RRCF   xA0,F
039E:  RRCF   x9F,F
03A0:  RRCF   x9E,F
03A2:  RRCF   x9D,F
03A4:  INCF   00,F
03A6:  BTFSC  FD8.2
03A8:  BRA    0534
03AA:  BRA    03C2
03AC:  BTFSC  xA0.7
03AE:  BRA    03C8
03B0:  BCF    FD8.0
03B2:  RLCF   x9D,F
03B4:  RLCF   x9E,F
03B6:  RLCF   x9F,F
03B8:  RLCF   xA0,F
03BA:  DECF   00,F
03BC:  BTFSC  FD8.2
03BE:  BRA    0534
03C0:  BRA    03AC
03C2:  BSF    x9C.6
03C4:  BRA    049C
03C6:  BCF    x9C.6
03C8:  MOVFF  93,9B
03CC:  BTFSS  x93.7
03CE:  BRA    03D4
03D0:  BSF    xA0.7
03D2:  BRA    0526
03D4:  BCF    xA0.7
03D6:  BRA    0526
03D8:  MOVFF  96,9A
03DC:  MOVFF  96,00
03E0:  MOVF   x92,W
03E2:  SUBWF  x9A,F
03E4:  MOVFF  93,A0
03E8:  BSF    xA0.7
03EA:  MOVFF  94,9F
03EE:  MOVFF  95,9E
03F2:  CLRF   x9D
03F4:  BCF    FD8.0
03F6:  RRCF   xA0,F
03F8:  RRCF   x9F,F
03FA:  RRCF   x9E,F
03FC:  RRCF   x9D,F
03FE:  DECFSZ x9A,F
0400:  BRA    03F2
0402:  BTFSS  x9B.7
0404:  BRA    040C
0406:  BSF    x9C.1
0408:  BRA    053E
040A:  BCF    x9C.1
040C:  BCF    x9A.0
040E:  BSF    x9C.5
0410:  CLRF   FEA
0412:  MOVLW  99
0414:  MOVWF  FE9
0416:  BRA    0564
0418:  BCF    x9C.5
041A:  BTFSC  x9B.7
041C:  BRA    0432
041E:  BTFSS  x9A.0
0420:  BRA    0448
0422:  RRCF   xA0,F
0424:  RRCF   x9F,F
0426:  RRCF   x9E,F
0428:  RRCF   x9D,F
042A:  INCF   00,F
042C:  BTFSC  FD8.2
042E:  BRA    0534
0430:  BRA    0448
0432:  BTFSC  xA0.7
0434:  BRA    044E
0436:  BCF    FD8.0
0438:  RLCF   x9D,F
043A:  RLCF   x9E,F
043C:  RLCF   x9F,F
043E:  RLCF   xA0,F
0440:  DECF   00,F
0442:  BTFSC  FD8.2
0444:  BRA    0534
0446:  BRA    0432
0448:  BSF    x9C.7
044A:  BRA    049C
044C:  BCF    x9C.7
044E:  MOVFF  97,9B
0452:  BTFSS  x97.7
0454:  BRA    045A
0456:  BSF    xA0.7
0458:  BRA    0526
045A:  BCF    xA0.7
045C:  BRA    0526
045E:  MOVFF  97,A0
0462:  BSF    xA0.7
0464:  MOVFF  98,9F
0468:  MOVFF  99,9E
046C:  BTFSS  x9B.7
046E:  BRA    0478
0470:  BCF    xA0.7
0472:  BSF    x9C.2
0474:  BRA    053E
0476:  BCF    x9C.2
0478:  CLRF   x9D
047A:  BCF    x9A.0
047C:  CLRF   FEA
047E:  MOVLW  95
0480:  MOVWF  FE9
0482:  BRA    0564
0484:  BTFSC  x9B.7
0486:  BRA    04C0
0488:  MOVFF  93,9B
048C:  BTFSS  x9A.0
048E:  BRA    049C
0490:  RRCF   xA0,F
0492:  RRCF   x9F,F
0494:  RRCF   x9E,F
0496:  RRCF   x9D,F
0498:  INCF   00,F
049A:  BZ    0534
049C:  BTFSS  x9D.7
049E:  BRA    04B6
04A0:  INCF   x9E,F
04A2:  BNZ   04B6
04A4:  INCF   x9F,F
04A6:  BNZ   04B6
04A8:  INCF   xA0,F
04AA:  BNZ   04B6
04AC:  RRCF   xA0,F
04AE:  RRCF   x9F,F
04B0:  RRCF   x9E,F
04B2:  INCF   00,F
04B4:  BZ    0534
04B6:  BTFSC  x9C.6
04B8:  BRA    03C6
04BA:  BTFSC  x9C.7
04BC:  BRA    044C
04BE:  BRA    04F8
04C0:  MOVLW  80
04C2:  XORWF  xA0,F
04C4:  BTFSS  xA0.7
04C6:  BRA    04D0
04C8:  BRA    053E
04CA:  MOVFF  97,9B
04CE:  BRA    04E4
04D0:  MOVFF  93,9B
04D4:  MOVF   xA0,F
04D6:  BNZ   04E4
04D8:  MOVF   x9F,F
04DA:  BNZ   04E4
04DC:  MOVF   x9E,F
04DE:  BNZ   04E4
04E0:  CLRF   00
04E2:  BRA    0526
04E4:  BTFSC  xA0.7
04E6:  BRA    04F8
04E8:  BCF    FD8.0
04EA:  RLCF   x9D,F
04EC:  RLCF   x9E,F
04EE:  RLCF   x9F,F
04F0:  RLCF   xA0,F
04F2:  DECFSZ 00,F
04F4:  BRA    04E4
04F6:  BRA    0534
04F8:  BTFSS  x9B.7
04FA:  BRA    0500
04FC:  BSF    xA0.7
04FE:  BRA    0526
0500:  BCF    xA0.7
0502:  BRA    0526
0504:  MOVFF  96,00
0508:  MOVFF  97,A0
050C:  MOVFF  98,9F
0510:  MOVFF  99,9E
0514:  BRA    0526
0516:  MOVFF  92,00
051A:  MOVFF  93,A0
051E:  MOVFF  94,9F
0522:  MOVFF  95,9E
0526:  MOVFF  A0,01
052A:  MOVFF  9F,02
052E:  MOVFF  9E,03
0532:  BRA    059C
0534:  CLRF   00
0536:  CLRF   01
0538:  CLRF   02
053A:  CLRF   03
053C:  BRA    059C
053E:  CLRF   x9D
0540:  COMF   x9E,F
0542:  COMF   x9F,F
0544:  COMF   xA0,F
0546:  COMF   x9D,F
0548:  INCF   x9D,F
054A:  BNZ   0556
054C:  INCF   x9E,F
054E:  BNZ   0556
0550:  INCF   x9F,F
0552:  BNZ   0556
0554:  INCF   xA0,F
0556:  BTFSC  x9C.0
0558:  BRA    0384
055A:  BTFSC  x9C.1
055C:  BRA    040A
055E:  BTFSC  x9C.2
0560:  BRA    0476
0562:  BRA    04CA
0564:  MOVF   FEF,W
0566:  ADDWF  x9E,F
0568:  BNC   0574
056A:  INCF   x9F,F
056C:  BNZ   0574
056E:  INCF   xA0,F
0570:  BTFSC  FD8.2
0572:  BSF    x9A.0
0574:  MOVF   FED,F
0576:  MOVF   FEF,W
0578:  ADDWF  x9F,F
057A:  BNC   0582
057C:  INCF   xA0,F
057E:  BTFSC  FD8.2
0580:  BSF    x9A.0
0582:  MOVF   FED,F
0584:  MOVF   FEF,W
0586:  BTFSC  FEF.7
0588:  BRA    058C
058A:  XORLW  80
058C:  ADDWF  xA0,F
058E:  BTFSC  FD8.0
0590:  BSF    x9A.0
0592:  BTFSC  x9C.4
0594:  BRA    0392
0596:  BTFSC  x9C.5
0598:  BRA    0418
059A:  BRA    0484
059C:  RETURN 0
059E:  MOVF   x92,W
05A0:  SUBLW  B6
05A2:  MOVWF  x92
05A4:  CLRF   03
05A6:  MOVFF  93,96
05AA:  BSF    x93.7
05AC:  BCF    FD8.0
05AE:  RRCF   x93,F
05B0:  RRCF   x94,F
05B2:  RRCF   x95,F
05B4:  RRCF   03,F
05B6:  RRCF   02,F
05B8:  RRCF   01,F
05BA:  RRCF   00,F
05BC:  DECFSZ x92,F
05BE:  BRA    05AC
05C0:  BTFSS  x96.7
05C2:  BRA    05DA
05C4:  COMF   00,F
05C6:  COMF   01,F
05C8:  COMF   02,F
05CA:  COMF   03,F
05CC:  INCF   00,F
05CE:  BTFSC  FD8.2
05D0:  INCF   01,F
05D2:  BTFSC  FD8.2
05D4:  INCF   02,F
05D6:  BTFSC  FD8.2
05D8:  INCF   03,F
05DA:  RETURN 0
05DC:  MOVLW  B6
05DE:  MOVWF  00
05E0:  CLRF   03
05E2:  CLRF   02
05E4:  CLRF   01
05E6:  MOVF   x90,W
05E8:  IORWF  x91,W
05EA:  IORWF  x92,W
05EC:  IORWF  x93,W
05EE:  BNZ   05F4
05F0:  CLRF   00
05F2:  BRA    060E
05F4:  BCF    FD8.0
05F6:  BTFSC  01.7
05F8:  BRA    060C
05FA:  RLCF   x90,F
05FC:  RLCF   x91,F
05FE:  RLCF   x92,F
0600:  RLCF   x93,F
0602:  RLCF   03,F
0604:  RLCF   02,F
0606:  RLCF   01,F
0608:  DECFSZ 00,F
060A:  BRA    05F4
060C:  BCF    01.7
060E:  RETURN 0
*
0E5C:  MOVF   x82,W
0E5E:  MULWF  x84
0E60:  MOVFF  FF3,01
0E64:  MOVFF  FF4,00
0E68:  MULWF  x85
0E6A:  MOVF   FF3,W
0E6C:  ADDWF  00,F
0E6E:  MOVF   x83,W
0E70:  MULWF  x84
0E72:  MOVF   FF3,W
0E74:  ADDWFC 00,W
0E76:  MOVWF  02
0E78:  GOTO   0EC8 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10                              
.................... #include <math.h>     
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #BYTE PORTA = 0xF80 
.................... #BYTE PORTB = 0xF81 
.................... #FUSES XT,MCLR,NOWDT,NOBROWNOUT, NOLVP, NOXINST 
.................... #use delay(crystal=20000000)                      
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)   
....................  
.................... #define borde_izq 4 
.................... #define med_izq 8 
.................... #define cent_izq 3 
.................... #define cent_der 2 
.................... #define med_der 1 
.................... #define borde_der 0 
....................  
....................  
.................... #define pulsador PIN_B0; 
....................  
....................  
.................... int16 duty=200; 
.................... int16 pwm_m_izq; 
.................... int16 pwm_m_der; 
....................  
.................... int32 aux32,num,den; 
.................... int8 aux,temp; 
.................... char TablaNumeros[10]={'0','1','2','3','4','5','6','7','8','9'}; 
.................... float auxfloat; 
.................... ////////////////////////////////////////////////////////////////////////////////// 
.................... int puntero; 
.................... float value, sensor[8]; 
.................... ////////////////////////////////////////////////////////////////////////////////// 
.................... float set_point=2.5; 
....................  
.................... float numerador; 
.................... float denominador; 
.................... float promedio; 
.................... float error; 
.................... float integral; 
.................... float derivativo; 
.................... float Pid; 
.................... float error_anterior; 
....................  
.................... int1 Encarrera=0; 
....................  
.................... int16 pwm; 
.................... int16 ganancia_pwm=50; 
.................... ////////////////////////////////////////////////////////////////////////////////// 
.................... int sensor_valor_min[6]; 
.................... int sensor_valor_max[6]; 
....................  
.................... void MostrarINT32 (int32 valor) 
.................... { 
....................    aux32 = valor; 
....................    temp=0; 
....................    if(aux32 >= 100000) 
....................    { 
....................       while(aux32 >= 100000) 
....................       { 
....................          aux32 = aux32 - 100000; 
....................          temp++; 
....................       } 
....................       if(temp>9) temp = 0; 
....................       //centena = temp;       // Actualizo la centena a mostrar 
....................       putc(TablaNumeros[temp]); 
....................       temp = 0; 
....................    } 
....................    if(aux32 >= 10000)  // Valor entre 10000 y 65535 (maximo valor admitido por int16)  
....................    { 
....................       while(aux32 >= 10000) 
....................       { 
....................          aux32 = aux32 - 10000; 
....................          temp++; 
....................       } 
....................       if(temp>9) temp = 0; 
....................       //centena = temp;       // Actualizo la centena a mostrar 
....................       putc(TablaNumeros[temp]); 
....................       temp = 0; 
....................       while(aux32 >= 1000) 
....................       { 
....................          aux32 = aux32 - 1000; 
....................          temp++; 
....................       } 
....................       if(temp>9) temp = 0; 
....................       //centena = temp;       // Actualizo la centena a mostrar 
....................       putc(TablaNumeros[temp]); 
....................       temp = 0; 
....................    }     
....................    else if (aux32 >= 1000)     // Valor entre 1000 y 9999 
....................    { 
....................       while(aux32 >= 1000) 
....................       { 
....................          aux32 = aux32 - 1000; 
....................          temp++; 
....................       } 
....................       if(temp>9) temp = 0; 
....................       //centena = temp;       // Actualizo la centena a mostrar 
....................       putc(TablaNumeros[temp]); 
....................       temp = 0; 
....................    } 
....................     
....................    while(aux32 >= 100) 
....................    { 
....................       aux32 = aux32 - 100; 
....................       temp++; 
....................    } 
....................    if(temp>9) temp = 0; 
....................    //centena = temp;       // Actualizo la centena a mostrar 
....................    putc(TablaNumeros[temp]); 
....................    temp = 0; 
....................              
....................    while(aux32 >= 10) 
....................    { 
....................       aux32 = aux32-10; 
....................       temp++; 
....................    } 
....................    if(temp>9) temp = 0; 
....................    putc(TablaNumeros[temp]); 
....................    temp = 0; 
....................    while(aux32 >= 1) 
....................    { 
....................       aux32 = aux32-1; 
....................       temp++; 
....................    } 
....................    if(temp>9) temp = 0; 
....................    putc(TablaNumeros[temp]); 
....................    temp = 0; 
....................    return; 
.................... } 
....................  
.................... void MostrarFloat (float valor) 
.................... { 
....................    float decimales, unidades; 
....................    if(valor < 0)  // Valor entre 10000 y 65535 (maximo valor admitido por int16) 
....................    { 
....................       putc('-');  // Muestro el signo si es negativo 
....................       valor = -(valor);    // cambio el signo para trabajar con numeros positivos  
....................                                  // el signo ya lo mostre. 
....................    } 
....................    decimales=modf(valor,&unidades); 
....................    aux32 = unidades; 
....................    // comienzo a mostrar la parte entera del float 
....................    temp=0;  
....................    if(aux32>10000) 
....................    { 
....................       while(aux32 >= 10000) 
....................       { 
....................          aux32 = aux32 - 10000; 
....................          temp++; 
....................       } 
....................       if(temp>9) temp = 0; 
....................       putc(TablaNumeros[temp]); 
....................       temp = 0; 
....................       while(aux32 >= 1000) 
....................       { 
....................          aux32 = aux32 - 1000; 
....................          temp++; 
....................       } 
....................       if(temp>9) temp = 0; 
....................       putc(TablaNumeros[temp]); 
....................       temp = 0; 
....................    }     
....................    else if (aux32 >= 1000)     // Valor entre 1000 y 9999 
....................    { 
....................       while(aux32 >= 1000) 
....................       { 
....................          aux32 = aux32 - 1000; 
....................          temp++; 
....................       } 
....................       if(temp>9) temp = 0; 
....................       //centena = temp;       // Actualizo la centena a mostrar 
....................       putc(TablaNumeros[temp]); 
....................       temp = 0; 
....................    } 
....................     
....................    while(aux32 >= 100) 
....................    { 
....................       aux32 = aux32 - 100; 
....................       temp++; 
....................    } 
....................    if(temp>9) temp = 0; 
....................    //centena = temp;       // Actualizo la centena a mostrar 
....................    putc(TablaNumeros[temp]); 
....................    temp = 0; 
....................              
....................    while(aux32 >= 10) 
....................    { 
....................       aux32 = aux32-10; 
....................       temp++; 
....................    } 
....................    if(temp>9) temp = 0; 
....................    putc(TablaNumeros[temp]); 
....................    temp = 0; 
....................    while(aux32 >= 1) 
....................    { 
....................       aux32 = aux32-1; 
....................       temp++; 
....................    } 
....................    if(temp>9) temp = 0; 
....................    putc(TablaNumeros[temp]); 
....................    temp = 0; 
....................     
....................    // ahora muestro los decimales 
....................    putc('.'); 
....................    while(decimales >= 0.1) 
....................    { 
....................       decimales = decimales-0.1; 
....................       temp++; 
....................    } 
....................    if(temp>9) temp = 0; 
....................    putc(TablaNumeros[temp]); 
....................    temp = 0; 
....................    while(decimales >= 0.01) 
....................    { 
....................       decimales = decimales-0.01; 
....................       temp++; 
....................    } 
....................    if(temp>9) temp = 0; 
....................    putc(TablaNumeros[temp]); 
....................    temp = 0; 
....................    return; 
.................... } 
.................... void lectura_de_sensores(){ 
.................... //4-5-3-2-1-0    
....................    for(puntero=0;puntero<9;puntero++) 
*
0610:  CLRF   26
0612:  MOVF   26,W
0614:  SUBLW  08
0616:  BTFSS  FD8.0
0618:  BRA    09D8
....................    { 
....................       set_adc_channel(puntero);  //Selecciono el puerto analogico 
061A:  RLCF   26,W
061C:  MOVWF  00
061E:  RLCF   00,F
0620:  MOVLW  FC
0622:  ANDWF  00,F
0624:  MOVF   FC2,W
0626:  ANDLW  C3
0628:  IORWF  00,W
062A:  MOVWF  FC2
....................       value=read_adc(); //leo el valor del adc y lo guardo en "value" 
062C:  BSF    FC2.1
062E:  BTFSC  FC2.1
0630:  BRA    062E
0632:  MOVFF  FC4,03
0636:  MOVFF  FC3,90
063A:  MOVFF  FC4,91
063E:  RCALL  0004
0640:  MOVFF  03,2A
0644:  MOVFF  02,29
0648:  MOVFF  01,28
064C:  MOVFF  00,27
....................       Sensor[puntero]=value*500.0/1024.0; //El adc vale de 0 a 500 
0650:  MOVF   26,W
0652:  MULLW  04
0654:  MOVF   FF3,W
0656:  CLRF   03
0658:  ADDLW  2B
065A:  MOVWF  FE9
065C:  MOVLW  00
065E:  ADDWFC 03,W
0660:  MOVWF  FEA
0662:  MOVFF  2A,93
0666:  MOVFF  29,92
066A:  MOVFF  28,91
066E:  MOVFF  27,90
0672:  CLRF   x97
0674:  CLRF   x96
0676:  MOVLW  7A
0678:  MOVWF  x95
067A:  MOVLW  87
067C:  MOVWF  x94
067E:  RCALL  003A
0680:  MOVFF  03,91
0684:  MOVFF  02,90
0688:  MOVFF  01,8F
068C:  MOVFF  00,8E
0690:  MOVFF  03,95
0694:  MOVFF  02,94
0698:  MOVFF  01,93
069C:  MOVFF  00,92
06A0:  CLRF   x99
06A2:  CLRF   x98
06A4:  CLRF   x97
06A6:  MOVLW  89
06A8:  MOVWF  x96
06AA:  RCALL  012C
06AC:  MOVFF  00,FEF
06B0:  MOVFF  01,FEC
06B4:  MOVFF  02,FEC
06B8:  MOVFF  03,FEC
....................        
....................       if(sensor[puntero]<sensor_valor_min[puntero]) sensor_valor_min[puntero]=sensor[puntero]; 
06BC:  MOVF   26,W
06BE:  MULLW  04
06C0:  MOVF   FF3,W
06C2:  CLRF   03
06C4:  ADDLW  2B
06C6:  MOVWF  FE9
06C8:  MOVLW  00
06CA:  ADDWFC 03,W
06CC:  MOVWF  FEA
06CE:  MOVFF  FEF,8C
06D2:  MOVFF  FEC,8D
06D6:  MOVFF  FEC,8E
06DA:  MOVFF  FEC,8F
06DE:  CLRF   03
06E0:  MOVF   26,W
06E2:  ADDLW  74
06E4:  MOVWF  FE9
06E6:  MOVLW  00
06E8:  ADDWFC 03,W
06EA:  MOVWF  FEA
06EC:  MOVF   FEF,W
06EE:  CLRF   x91
06F0:  MOVWF  x90
06F2:  RCALL  0004
06F4:  MOVFF  8F,93
06F8:  MOVFF  8E,92
06FC:  MOVFF  8D,91
0700:  MOVFF  8C,90
0704:  MOVFF  03,97
0708:  MOVFF  02,96
070C:  MOVFF  01,95
0710:  MOVFF  00,94
0714:  RCALL  0286
0716:  BNC   076C
0718:  CLRF   03
071A:  MOVF   26,W
071C:  ADDLW  74
071E:  MOVWF  01
0720:  MOVLW  00
0722:  ADDWFC 03,F
0724:  MOVFF  01,8C
0728:  MOVFF  03,8D
072C:  MOVF   26,W
072E:  MULLW  04
0730:  MOVF   FF3,W
0732:  CLRF   03
0734:  ADDLW  2B
0736:  MOVWF  FE9
0738:  MOVLW  00
073A:  ADDWFC 03,W
073C:  MOVWF  FEA
073E:  MOVFF  FEF,00
0742:  MOVFF  FEC,01
0746:  MOVFF  FEC,02
074A:  MOVFF  FEC,03
074E:  MOVFF  03,91
0752:  MOVFF  02,90
0756:  MOVFF  01,8F
075A:  MOVFF  00,8E
075E:  RCALL  02FC
0760:  MOVFF  8D,FEA
0764:  MOVFF  8C,FE9
0768:  MOVFF  01,FEF
....................       if(sensor[puntero]>sensor_valor_max[puntero]) sensor_valor_max[puntero]=sensor[puntero]; 
076C:  MOVF   26,W
076E:  MULLW  04
0770:  MOVF   FF3,W
0772:  CLRF   03
0774:  ADDLW  2B
0776:  MOVWF  FE9
0778:  MOVLW  00
077A:  ADDWFC 03,W
077C:  MOVWF  FEA
077E:  MOVFF  FEF,8C
0782:  MOVFF  FEC,8D
0786:  MOVFF  FEC,8E
078A:  MOVFF  FEC,8F
078E:  CLRF   03
0790:  MOVF   26,W
0792:  ADDLW  7A
0794:  MOVWF  FE9
0796:  MOVLW  00
0798:  ADDWFC 03,W
079A:  MOVWF  FEA
079C:  MOVF   FEF,W
079E:  CLRF   x91
07A0:  MOVWF  x90
07A2:  RCALL  0004
07A4:  MOVFF  03,93
07A8:  MOVFF  02,92
07AC:  MOVFF  01,91
07B0:  MOVFF  00,90
07B4:  MOVFF  8F,97
07B8:  MOVFF  8E,96
07BC:  MOVFF  8D,95
07C0:  MOVFF  8C,94
07C4:  RCALL  0286
07C6:  BNC   081C
07C8:  CLRF   03
07CA:  MOVF   26,W
07CC:  ADDLW  7A
07CE:  MOVWF  01
07D0:  MOVLW  00
07D2:  ADDWFC 03,F
07D4:  MOVFF  01,8C
07D8:  MOVFF  03,8D
07DC:  MOVF   26,W
07DE:  MULLW  04
07E0:  MOVF   FF3,W
07E2:  CLRF   03
07E4:  ADDLW  2B
07E6:  MOVWF  FE9
07E8:  MOVLW  00
07EA:  ADDWFC 03,W
07EC:  MOVWF  FEA
07EE:  MOVFF  FEF,00
07F2:  MOVFF  FEC,01
07F6:  MOVFF  FEC,02
07FA:  MOVFF  FEC,03
07FE:  MOVFF  03,91
0802:  MOVFF  02,90
0806:  MOVFF  01,8F
080A:  MOVFF  00,8E
080E:  RCALL  02FC
0810:  MOVFF  8D,FEA
0814:  MOVFF  8C,FE9
0818:  MOVFF  01,FEF
....................        
....................       int32 num=(sensor[puntero]-sensor_valor_min[puntero]); 
081C:  MOVF   26,W
081E:  MULLW  04
0820:  MOVF   FF3,W
0822:  CLRF   03
0824:  ADDLW  2B
0826:  MOVWF  FE9
0828:  MOVLW  00
082A:  ADDWFC 03,W
082C:  MOVWF  FEA
082E:  MOVFF  FEF,8C
0832:  MOVFF  FEC,8D
0836:  MOVFF  FEC,8E
083A:  MOVFF  FEC,8F
083E:  CLRF   03
0840:  MOVF   26,W
0842:  ADDLW  74
0844:  MOVWF  FE9
0846:  MOVLW  00
0848:  ADDWFC 03,W
084A:  MOVWF  FEA
084C:  MOVF   FEF,W
084E:  CLRF   x91
0850:  MOVWF  x90
0852:  CALL   0004
0856:  MOVFF  FEA,91
085A:  MOVFF  FE9,90
085E:  BSF    FD8.1
0860:  MOVFF  8F,95
0864:  MOVFF  8E,94
0868:  MOVFF  8D,93
086C:  MOVFF  8C,92
0870:  MOVFF  03,99
0874:  MOVFF  02,98
0878:  MOVFF  01,97
087C:  MOVFF  00,96
0880:  RCALL  0334
0882:  MOVFF  91,FEA
0886:  MOVFF  90,FE9
088A:  MOVFF  03,95
088E:  MOVFF  02,94
0892:  MOVFF  01,93
0896:  MOVFF  00,92
089A:  RCALL  059E
089C:  MOVFF  03,83
08A0:  MOVFF  02,82
08A4:  MOVFF  01,81
08A8:  MOVFF  00,80
....................       num*=1000.0; 
08AC:  MOVFF  83,93
08B0:  MOVFF  82,92
08B4:  MOVFF  81,91
08B8:  MOVFF  80,90
08BC:  RCALL  05DC
08BE:  MOVFF  03,93
08C2:  MOVFF  02,92
08C6:  MOVFF  01,91
08CA:  MOVFF  00,90
08CE:  CLRF   x97
08D0:  CLRF   x96
08D2:  MOVLW  7A
08D4:  MOVWF  x95
08D6:  MOVLW  88
08D8:  MOVWF  x94
08DA:  CALL   003A
08DE:  MOVFF  03,95
08E2:  MOVFF  02,94
08E6:  MOVFF  01,93
08EA:  MOVFF  00,92
08EE:  RCALL  059E
08F0:  MOVFF  03,83
08F4:  MOVFF  02,82
08F8:  MOVFF  01,81
08FC:  MOVFF  00,80
....................       int32 den=(sensor_valor_max[puntero]-sensor_valor_min[puntero]); 
....................       float aux_sensor_float=(float)num/den; 
0900:  CLRF   03
0902:  MOVF   26,W
0904:  ADDLW  7A
0906:  MOVWF  FE9
0908:  MOVLW  00
090A:  ADDWFC 03,W
090C:  MOVWF  FEA
090E:  MOVFF  FEF,8C
0912:  CLRF   03
0914:  MOVF   26,W
0916:  ADDLW  74
0918:  MOVWF  FE9
091A:  MOVLW  00
091C:  ADDWFC 03,W
091E:  MOVWF  FEA
0920:  MOVF   FEF,W
0922:  SUBWF  x8C,W
0924:  MOVWF  x84
0926:  CLRF   x85
0928:  CLRF   x86
092A:  CLRF   x87
092C:  MOVFF  83,93
0930:  MOVFF  82,92
0934:  MOVFF  81,91
0938:  MOVFF  80,90
093C:  RCALL  05DC
093E:  MOVFF  03,8F
0942:  MOVFF  02,8E
0946:  MOVFF  01,8D
094A:  MOVFF  00,8C
094E:  MOVFF  87,93
0952:  MOVFF  86,92
0956:  MOVFF  85,91
095A:  MOVFF  84,90
095E:  RCALL  05DC
0960:  MOVFF  8F,95
0964:  MOVFF  8E,94
0968:  MOVFF  8D,93
096C:  MOVFF  8C,92
0970:  MOVFF  03,99
0974:  MOVFF  02,98
0978:  MOVFF  01,97
097C:  MOVFF  00,96
0980:  CALL   012C
0984:  MOVFF  03,8B
0988:  MOVFF  02,8A
098C:  MOVFF  01,89
0990:  MOVFF  00,88
....................       sensor[puntero]=(int16)aux_sensor_float; 
0994:  MOVF   26,W
0996:  MULLW  04
0998:  MOVF   FF3,W
099A:  CLRF   03
099C:  ADDLW  2B
099E:  MOVWF  FE9
09A0:  MOVLW  00
09A2:  ADDWFC 03,W
09A4:  MOVWF  FEA
09A6:  MOVFF  8B,91
09AA:  MOVFF  8A,90
09AE:  MOVFF  89,8F
09B2:  MOVFF  88,8E
09B6:  RCALL  02FC
09B8:  MOVFF  02,91
09BC:  MOVFF  01,90
09C0:  CALL   0004
09C4:  MOVFF  00,FEF
09C8:  MOVFF  01,FEC
09CC:  MOVFF  02,FEC
09D0:  MOVFF  03,FEC
09D4:  INCF   26,F
09D6:  BRA    0612
....................        
....................    } 
09D8:  RETURN 0
....................  
.................... } 
....................  
.................... void Control_PID(float Kp,float Kd,float ki) 
.................... { 
....................    numerador=((sensor[borde_izq])+(sensor[med_izq]*2)+(sensor[cent_izq]*3)+(sensor[cent_der]*4)+(sensor[med_der]*5)+(sensor[borde_der]*6)); 
09DA:  MOVFF  4E,93
09DE:  MOVFF  4D,92
09E2:  MOVFF  4C,91
09E6:  MOVFF  4B,90
09EA:  CLRF   x97
09EC:  CLRF   x96
09EE:  CLRF   x95
09F0:  MOVLW  80
09F2:  MOVWF  x94
09F4:  CALL   003A
09F8:  BCF    FD8.1
09FA:  MOVFF  3E,95
09FE:  MOVFF  3D,94
0A02:  MOVFF  3C,93
0A06:  MOVFF  3B,92
0A0A:  MOVFF  03,99
0A0E:  MOVFF  02,98
0A12:  MOVFF  01,97
0A16:  MOVFF  00,96
0A1A:  RCALL  0334
0A1C:  MOVFF  03,8F
0A20:  MOVFF  02,8E
0A24:  MOVFF  01,8D
0A28:  MOVFF  00,8C
0A2C:  MOVFF  3A,93
0A30:  MOVFF  39,92
0A34:  MOVFF  38,91
0A38:  MOVFF  37,90
0A3C:  CLRF   x97
0A3E:  CLRF   x96
0A40:  MOVLW  40
0A42:  MOVWF  x95
0A44:  MOVLW  80
0A46:  MOVWF  x94
0A48:  CALL   003A
0A4C:  BCF    FD8.1
0A4E:  MOVFF  8F,95
0A52:  MOVFF  8E,94
0A56:  MOVFF  8D,93
0A5A:  MOVFF  8C,92
0A5E:  MOVFF  03,99
0A62:  MOVFF  02,98
0A66:  MOVFF  01,97
0A6A:  MOVFF  00,96
0A6E:  RCALL  0334
0A70:  MOVFF  03,8F
0A74:  MOVFF  02,8E
0A78:  MOVFF  01,8D
0A7C:  MOVFF  00,8C
0A80:  MOVFF  36,93
0A84:  MOVFF  35,92
0A88:  MOVFF  34,91
0A8C:  MOVFF  33,90
0A90:  CLRF   x97
0A92:  CLRF   x96
0A94:  CLRF   x95
0A96:  MOVLW  81
0A98:  MOVWF  x94
0A9A:  CALL   003A
0A9E:  BCF    FD8.1
0AA0:  MOVFF  8F,95
0AA4:  MOVFF  8E,94
0AA8:  MOVFF  8D,93
0AAC:  MOVFF  8C,92
0AB0:  MOVFF  03,99
0AB4:  MOVFF  02,98
0AB8:  MOVFF  01,97
0ABC:  MOVFF  00,96
0AC0:  RCALL  0334
0AC2:  MOVFF  03,8F
0AC6:  MOVFF  02,8E
0ACA:  MOVFF  01,8D
0ACE:  MOVFF  00,8C
0AD2:  MOVFF  32,93
0AD6:  MOVFF  31,92
0ADA:  MOVFF  30,91
0ADE:  MOVFF  2F,90
0AE2:  CLRF   x97
0AE4:  CLRF   x96
0AE6:  MOVLW  20
0AE8:  MOVWF  x95
0AEA:  MOVLW  81
0AEC:  MOVWF  x94
0AEE:  CALL   003A
0AF2:  BCF    FD8.1
0AF4:  MOVFF  8F,95
0AF8:  MOVFF  8E,94
0AFC:  MOVFF  8D,93
0B00:  MOVFF  8C,92
0B04:  MOVFF  03,99
0B08:  MOVFF  02,98
0B0C:  MOVFF  01,97
0B10:  MOVFF  00,96
0B14:  RCALL  0334
0B16:  MOVFF  03,8F
0B1A:  MOVFF  02,8E
0B1E:  MOVFF  01,8D
0B22:  MOVFF  00,8C
0B26:  MOVFF  2E,93
0B2A:  MOVFF  2D,92
0B2E:  MOVFF  2C,91
0B32:  MOVFF  2B,90
0B36:  CLRF   x97
0B38:  CLRF   x96
0B3A:  MOVLW  40
0B3C:  MOVWF  x95
0B3E:  MOVLW  81
0B40:  MOVWF  x94
0B42:  CALL   003A
0B46:  BCF    FD8.1
0B48:  MOVFF  8F,95
0B4C:  MOVFF  8E,94
0B50:  MOVFF  8D,93
0B54:  MOVFF  8C,92
0B58:  MOVFF  03,99
0B5C:  MOVFF  02,98
0B60:  MOVFF  01,97
0B64:  MOVFF  00,96
0B68:  CALL   0334
0B6C:  MOVFF  03,52
0B70:  MOVFF  02,51
0B74:  MOVFF  01,50
0B78:  MOVFF  00,4F
....................    denominador=(sensor[borde_izq]+sensor[med_izq]+sensor[cent_izq]+sensor[cent_der]+sensor[med_der]+sensor[borde_der]); 
0B7C:  BCF    FD8.1
0B7E:  MOVFF  3E,95
0B82:  MOVFF  3D,94
0B86:  MOVFF  3C,93
0B8A:  MOVFF  3B,92
0B8E:  MOVFF  4E,99
0B92:  MOVFF  4D,98
0B96:  MOVFF  4C,97
0B9A:  MOVFF  4B,96
0B9E:  CALL   0334
0BA2:  MOVFF  03,8F
0BA6:  MOVFF  02,8E
0BAA:  MOVFF  01,8D
0BAE:  MOVFF  00,8C
0BB2:  BCF    FD8.1
0BB4:  MOVFF  03,95
0BB8:  MOVFF  02,94
0BBC:  MOVFF  01,93
0BC0:  MOVFF  00,92
0BC4:  MOVFF  3A,99
0BC8:  MOVFF  39,98
0BCC:  MOVFF  38,97
0BD0:  MOVFF  37,96
0BD4:  CALL   0334
0BD8:  MOVFF  03,8F
0BDC:  MOVFF  02,8E
0BE0:  MOVFF  01,8D
0BE4:  MOVFF  00,8C
0BE8:  BCF    FD8.1
0BEA:  MOVFF  03,95
0BEE:  MOVFF  02,94
0BF2:  MOVFF  01,93
0BF6:  MOVFF  00,92
0BFA:  MOVFF  36,99
0BFE:  MOVFF  35,98
0C02:  MOVFF  34,97
0C06:  MOVFF  33,96
0C0A:  CALL   0334
0C0E:  MOVFF  03,8F
0C12:  MOVFF  02,8E
0C16:  MOVFF  01,8D
0C1A:  MOVFF  00,8C
0C1E:  BCF    FD8.1
0C20:  MOVFF  03,95
0C24:  MOVFF  02,94
0C28:  MOVFF  01,93
0C2C:  MOVFF  00,92
0C30:  MOVFF  32,99
0C34:  MOVFF  31,98
0C38:  MOVFF  30,97
0C3C:  MOVFF  2F,96
0C40:  CALL   0334
0C44:  MOVFF  03,8F
0C48:  MOVFF  02,8E
0C4C:  MOVFF  01,8D
0C50:  MOVFF  00,8C
0C54:  BCF    FD8.1
0C56:  MOVFF  03,95
0C5A:  MOVFF  02,94
0C5E:  MOVFF  01,93
0C62:  MOVFF  00,92
0C66:  MOVFF  2E,99
0C6A:  MOVFF  2D,98
0C6E:  MOVFF  2C,97
0C72:  MOVFF  2B,96
0C76:  CALL   0334
0C7A:  MOVFF  03,56
0C7E:  MOVFF  02,55
0C82:  MOVFF  01,54
0C86:  MOVFF  00,53
....................     
....................    promedio=(numerador/denominador); 
0C8A:  MOVFF  52,95
0C8E:  MOVFF  51,94
0C92:  MOVFF  50,93
0C96:  MOVFF  4F,92
0C9A:  MOVFF  56,99
0C9E:  MOVFF  55,98
0CA2:  MOVFF  54,97
0CA6:  MOVFF  53,96
0CAA:  CALL   012C
0CAE:  MOVFF  03,5A
0CB2:  MOVFF  02,59
0CB6:  MOVFF  01,58
0CBA:  MOVFF  00,57
....................  
....................    error=(promedio-set_point); 
0CBE:  BSF    FD8.1
0CC0:  MOVFF  5A,95
0CC4:  MOVFF  59,94
0CC8:  MOVFF  58,93
0CCC:  MOVFF  57,92
0CD0:  MOVFF  4E,99
0CD4:  MOVFF  4D,98
0CD8:  MOVFF  4C,97
0CDC:  MOVFF  4B,96
0CE0:  CALL   0334
0CE4:  MOVFF  03,5E
0CE8:  MOVFF  02,5D
0CEC:  MOVFF  01,5C
0CF0:  MOVFF  00,5B
....................  
....................    integral+=error_anterior; 
0CF4:  BCF    FD8.1
0CF6:  MOVFF  62,95
0CFA:  MOVFF  61,94
0CFE:  MOVFF  60,93
0D02:  MOVFF  5F,92
0D06:  MOVFF  6E,99
0D0A:  MOVFF  6D,98
0D0E:  MOVFF  6C,97
0D12:  MOVFF  6B,96
0D16:  CALL   0334
0D1A:  MOVFF  03,62
0D1E:  MOVFF  02,61
0D22:  MOVFF  01,60
0D26:  MOVFF  00,5F
....................     
....................    derivativo=(error-error_anterior); 
0D2A:  BSF    FD8.1
0D2C:  MOVFF  5E,95
0D30:  MOVFF  5D,94
0D34:  MOVFF  5C,93
0D38:  MOVFF  5B,92
0D3C:  MOVFF  6E,99
0D40:  MOVFF  6D,98
0D44:  MOVFF  6C,97
0D48:  MOVFF  6B,96
0D4C:  CALL   0334
0D50:  MOVFF  03,66
0D54:  MOVFF  02,65
0D58:  MOVFF  01,64
0D5C:  MOVFF  00,63
....................     
....................    pid=((Kp*error)+(kd*derivativo)+(Ki*integral)); 
0D60:  MOVFF  83,93
0D64:  MOVFF  82,92
0D68:  MOVFF  81,91
0D6C:  MOVFF  80,90
0D70:  MOVFF  5E,97
0D74:  MOVFF  5D,96
0D78:  MOVFF  5C,95
0D7C:  MOVFF  5B,94
0D80:  CALL   003A
0D84:  MOVFF  03,8F
0D88:  MOVFF  02,8E
0D8C:  MOVFF  01,8D
0D90:  MOVFF  00,8C
0D94:  MOVFF  87,93
0D98:  MOVFF  86,92
0D9C:  MOVFF  85,91
0DA0:  MOVFF  84,90
0DA4:  MOVFF  66,97
0DA8:  MOVFF  65,96
0DAC:  MOVFF  64,95
0DB0:  MOVFF  63,94
0DB4:  CALL   003A
0DB8:  BCF    FD8.1
0DBA:  MOVFF  8F,95
0DBE:  MOVFF  8E,94
0DC2:  MOVFF  8D,93
0DC6:  MOVFF  8C,92
0DCA:  MOVFF  03,99
0DCE:  MOVFF  02,98
0DD2:  MOVFF  01,97
0DD6:  MOVFF  00,96
0DDA:  CALL   0334
0DDE:  MOVFF  03,8F
0DE2:  MOVFF  02,8E
0DE6:  MOVFF  01,8D
0DEA:  MOVFF  00,8C
0DEE:  MOVFF  8B,93
0DF2:  MOVFF  8A,92
0DF6:  MOVFF  89,91
0DFA:  MOVFF  88,90
0DFE:  MOVFF  62,97
0E02:  MOVFF  61,96
0E06:  MOVFF  60,95
0E0A:  MOVFF  5F,94
0E0E:  CALL   003A
0E12:  BCF    FD8.1
0E14:  MOVFF  8F,95
0E18:  MOVFF  8E,94
0E1C:  MOVFF  8D,93
0E20:  MOVFF  8C,92
0E24:  MOVFF  03,99
0E28:  MOVFF  02,98
0E2C:  MOVFF  01,97
0E30:  MOVFF  00,96
0E34:  CALL   0334
0E38:  MOVFF  03,6A
0E3C:  MOVFF  02,69
0E40:  MOVFF  01,68
0E44:  MOVFF  00,67
....................     
....................    error_anterior=error; 
0E48:  MOVFF  5E,6E
0E4C:  MOVFF  5D,6D
0E50:  MOVFF  5C,6C
0E54:  MOVFF  5B,6B
0E58:  GOTO   10CA (RETURN)
....................     
.................... } 
....................  
.................... void Actualizo_motores() 
.................... { 
....................    if(pid>0) 
*
0E7C:  CLRF   x93
0E7E:  CLRF   x92
0E80:  CLRF   x91
0E82:  CLRF   x90
0E84:  MOVFF  6A,97
0E88:  MOVFF  69,96
0E8C:  MOVFF  68,95
0E90:  MOVFF  67,94
0E94:  CALL   0286
0E98:  BNC   0F06
....................    { 
....................       pwm=(INT16)pid*ganancia_pwm; 
0E9A:  MOVFF  6A,91
0E9E:  MOVFF  69,90
0EA2:  MOVFF  68,8F
0EA6:  MOVFF  67,8E
0EAA:  CALL   02FC
0EAE:  MOVFF  02,81
0EB2:  MOVFF  01,80
0EB6:  MOVFF  02,83
0EBA:  MOVFF  01,82
0EBE:  MOVFF  73,85
0EC2:  MOVFF  72,84
0EC6:  BRA    0E5C
0EC8:  MOVFF  02,71
0ECC:  MOVFF  01,70
....................       pwm_m_izq=(duty+pwm); 
0ED0:  MOVF   x70,W
0ED2:  ADDWF  04,W
0ED4:  MOVWF  06
0ED6:  MOVF   x71,W
0ED8:  ADDWFC 05,W
0EDA:  MOVWF  07
....................       set_pwm2_duty(100); 
0EDC:  MOVLW  64
0EDE:  MOVWF  FBB
....................       set_pwm1_duty(pwm_m_izq);    
0EE0:  MOVFF  07,02
0EE4:  MOVFF  06,01
0EE8:  RRCF   02,F
0EEA:  RRCF   01,F
0EEC:  RRCF   02,F
0EEE:  RRCF   01,F
0EF0:  RRCF   02,F
0EF2:  MOVFF  01,FBE
0EF6:  RRCF   02,F
0EF8:  RRCF   02,W
0EFA:  ANDLW  30
0EFC:  MOVWF  00
0EFE:  MOVF   FBD,W
0F00:  ANDLW  CF
0F02:  IORWF  00,W
0F04:  MOVWF  FBD
....................    } 
....................    if(pid<0) 
0F06:  MOVFF  6A,93
0F0A:  MOVFF  69,92
0F0E:  MOVFF  68,91
0F12:  MOVFF  67,90
0F16:  CLRF   x97
0F18:  CLRF   x96
0F1A:  CLRF   x95
0F1C:  CLRF   x94
0F1E:  CALL   0286
0F22:  BNC   0FD6
....................    { 
....................       pid = ((-1)*pid);        // Cambio el signo para ajustar el rango 
0F24:  CLRF   x93
0F26:  CLRF   x92
0F28:  MOVLW  80
0F2A:  MOVWF  x91
0F2C:  MOVLW  7F
0F2E:  MOVWF  x90
0F30:  MOVFF  6A,97
0F34:  MOVFF  69,96
0F38:  MOVFF  68,95
0F3C:  MOVFF  67,94
0F40:  CALL   003A
0F44:  MOVFF  03,6A
0F48:  MOVFF  02,69
0F4C:  MOVFF  01,68
0F50:  MOVFF  00,67
....................       pwm = (pid*ganancia_pwm); 
0F54:  MOVFF  73,91
0F58:  MOVFF  72,90
0F5C:  CALL   0004
0F60:  MOVFF  6A,93
0F64:  MOVFF  69,92
0F68:  MOVFF  68,91
0F6C:  MOVFF  67,90
0F70:  MOVFF  03,97
0F74:  MOVFF  02,96
0F78:  MOVFF  01,95
0F7C:  MOVFF  00,94
0F80:  CALL   003A
0F84:  MOVFF  03,91
0F88:  MOVFF  02,90
0F8C:  MOVFF  01,8F
0F90:  MOVFF  00,8E
0F94:  CALL   02FC
0F98:  MOVFF  02,71
0F9C:  MOVFF  01,70
....................       pwm_m_der = (duty+pwm); 
0FA0:  MOVF   x70,W
0FA2:  ADDWF  04,W
0FA4:  MOVWF  08
0FA6:  MOVF   x71,W
0FA8:  ADDWFC 05,W
0FAA:  MOVWF  09
....................       set_pwm2_duty(pwm_m_der); 
0FAC:  MOVFF  09,02
0FB0:  MOVFF  08,01
0FB4:  RRCF   02,F
0FB6:  RRCF   01,F
0FB8:  RRCF   02,F
0FBA:  RRCF   01,F
0FBC:  RRCF   02,F
0FBE:  MOVFF  01,FBB
0FC2:  RRCF   02,F
0FC4:  RRCF   02,W
0FC6:  ANDLW  30
0FC8:  MOVWF  00
0FCA:  MOVF   FBA,W
0FCC:  ANDLW  CF
0FCE:  IORWF  00,W
0FD0:  MOVWF  FBA
....................       set_pwm1_duty(100); 
0FD2:  MOVLW  64
0FD4:  MOVWF  FBE
....................    } 
0FD6:  GOTO   10CC (RETURN)
.................... } 
....................  
.................... void mostrar_pantalla() 
.................... { 
....................    putc('A'); 
....................    mostrarINT32(Sensor[0]); 
....................    putc(' '); 
....................     putc('B'); 
....................    mostrarINT32(Sensor[1]); 
....................    putc(' '); 
....................     putc('C'); 
....................    mostrarINT32(Sensor[2]); 
....................    putc(' '); 
....................     putc('D'); 
....................    mostrarINT32(Sensor[3]); 
....................    putc(' '); 
....................     putc('E'); 
....................    mostrarINT32(Sensor[4]); 
....................    putc(' '); 
....................    putc('F'); 
....................    mostrarINT32(Sensor[5]); 
....................    putc(' '); 
....................    putc('I'); 
....................    mostrarINT32(Sensor[8]); 
....................   
....................    putc(13);    
....................    putc(10);    
.................... } 
....................  
.................... Void main() 
0FDA:  CLRF   FF8
0FDC:  BCF    FD0.7
0FDE:  BSF    FB8.3
0FE0:  MOVLW  08
0FE2:  MOVWF  FAF
0FE4:  MOVLW  02
0FE6:  MOVWF  FB0
0FE8:  MOVLW  A6
0FEA:  MOVWF  FAC
0FEC:  MOVLW  90
0FEE:  MOVWF  FAB
0FF0:  CLRF   05
0FF2:  MOVLW  C8
0FF4:  MOVWF  04
0FF6:  CLRF   4E
0FF8:  CLRF   4D
0FFA:  MOVLW  20
0FFC:  MOVWF  4C
0FFE:  MOVLW  80
1000:  MOVWF  4B
1002:  BCF    x6F.0
1004:  CLRF   x73
1006:  MOVLW  32
1008:  MOVWF  x72
100A:  MOVF   FC1,W
100C:  ANDLW  C0
100E:  IORLW  0F
1010:  MOVWF  FC1
1012:  MOVLW  07
1014:  MOVWF  FB4
1016:  MOVLW  30
1018:  MOVWF  18
101A:  MOVLW  31
101C:  MOVWF  19
101E:  MOVLW  32
1020:  MOVWF  1A
1022:  MOVLW  33
1024:  MOVWF  1B
1026:  MOVLW  34
1028:  MOVWF  1C
102A:  MOVLW  35
102C:  MOVWF  1D
102E:  MOVLW  36
1030:  MOVWF  1E
1032:  MOVLW  37
1034:  MOVWF  1F
1036:  MOVLW  38
1038:  MOVWF  20
103A:  MOVLW  39
103C:  MOVWF  21
.................... { 
....................       
....................      setup_uart(9600);      
103E:  BSF    FB8.3
1040:  MOVLW  08
1042:  MOVWF  FAF
1044:  MOVLW  02
1046:  MOVWF  FB0
1048:  MOVLW  A6
104A:  MOVWF  FAC
104C:  MOVLW  90
104E:  MOVWF  FAB
....................    setup_adc_ports(AN0_TO_AN8); 
1050:  MOVF   FC1,W
1052:  ANDLW  C0
1054:  IORLW  06
1056:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2|ADC_TAD_MUL_0); 
1058:  MOVF   FC0,W
105A:  ANDLW  C0
105C:  MOVWF  FC0
105E:  BSF    FC0.7
1060:  BSF    FC2.0
....................  
....................      setup_timer_2(T2_DIV_BY_16,255,1);      //819 us overflow, 819 us interrupt 
1062:  MOVLW  00
1064:  IORLW  06
1066:  MOVWF  FCA
1068:  MOVLW  FF
106A:  MOVWF  FCB
....................      setup_ccp1(CCP_PWM); 
106C:  BCF    F94.2
106E:  BCF    F8B.2
1070:  MOVLW  0C
1072:  MOVWF  FBD
....................      setup_ccp2(CCP_PWM); 
1074:  BCF    F94.1
1076:  BCF    F8B.1
1078:  MOVWF  FBA
....................     set_pwm1_duty((int16)1);       
107A:  CLRF   FBE
107C:  MOVF   FBD,W
107E:  ANDLW  CF
1080:  IORLW  10
1082:  MOVWF  FBD
....................      set_pwm2_duty((int16)1); 
1084:  CLRF   FBB
1086:  MOVF   FBA,W
1088:  ANDLW  CF
108A:  IORLW  10
108C:  MOVWF  FBA
....................      setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit);      //1,6 ms overflow 
108E:  MOVLW  C4
1090:  MOVWF  FD5
....................      enable_interrupts(INT_TIMER0);   
1092:  BSF    FF2.5
....................      enable_interrupts(GLOBAL);     
1094:  MOVLW  C0
1096:  IORWF  FF2,F
....................  
....................   while(1){ 
....................      lectura_de_sensores(); 
1098:  CALL   0610
....................      if(input(PIN_B0)==0b0) Encarrera=1; 
109C:  BSF    F93.0
109E:  BTFSC  F81.0
10A0:  BRA    10A4
10A2:  BSF    x6F.0
....................       while(Encarrera){ 
10A4:  BTFSS  x6F.0
10A6:  BRA    10CE
....................          lectura_de_sensores(); 
10A8:  CALL   0610
....................          control_pid(1.4,1,0); //kp,ki,kd 
10AC:  MOVLW  33
10AE:  MOVWF  x83
10B0:  MOVWF  x82
10B2:  MOVWF  x81
10B4:  MOVLW  7F
10B6:  MOVWF  x80
10B8:  CLRF   x87
10BA:  CLRF   x86
10BC:  CLRF   x85
10BE:  MOVWF  x84
10C0:  CLRF   x8B
10C2:  CLRF   x8A
10C4:  CLRF   x89
10C6:  CLRF   x88
10C8:  BRA    09DA
....................          actualizo_motores(); 
10CA:  BRA    0E7C
10CC:  BRA    10A4
....................          //mostrar_pantalla();    
....................           
....................         } 
10CE:  BRA    1098
....................   } 
.................... } 
10D0:  SLEEP 

Configuration Fuses:
   Word  1: CC04   PLL5 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 1E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
